import os
import sys
sys.path.append('..')
sys.path.append('../..')
from toolkit.function.base_function import dirs_walk
import shutil
import numpy as np
from glob import glob
from tqdm import tqdm
 
# os.remove(path)   #删除文件
# os.removedirs(path)   #删除空文件夹
# os.rmdir(path)    #删除空文件夹
# shutil.rmtree(path)    #递归删除文件夹，即：删除非空文件夹

def generate_file_lists(dataset,if_train=True,method='gt',save_method='delete'):

    '''
    input:
        dataset: choose type of dataset
        method: determine dir to load disparity maps; ep: (1)gt for groundtruth (2) PSMNet for disparity maps generated by PSMNet
        save_method: determine dir to save output disparity maps; ep: (1)gt for groundtruth (2) PSMNet for disparity maps generated by PSMNet
        if_train: choose training set or testing set
    output:
        return a dictionary of {path of left images, right images, input disparity maps, output disparity maps}
    '''

    if not '+' in dataset:
        return single_file_lists(dataset,if_train,method=method,save_method=save_method)[0]
    else:
        concat = None
        len=0
        dataset = dataset.split('+')
        for sub_dataset in dataset:
            sub_dic,len_ = single_file_lists(sub_dataset,if_train,method=method,save_method=save_method)
            if concat is None:
                concat = sub_dic.copy()
            else:
                for key in concat.keys():
                    concat[key] += sub_dic[key]
            len += len_
        print('total dataset contains {} samples'.format(str(len)))
        return concat

def single_file_lists(dataset,if_train,method='gt',save_method='delete',dataset_scale = None):
    splits = dataset.split('*') # check if re-scale the dataset
    if len(splits) == 1:
        dataset_scale = 1
    elif len(splits) == 2: # re-scale
        dataset_scale=float(splits[1])
        dataset = splits[0]
    else:
        raise ValueError('invalid dataset type input') 

    dataset_ori = ['Cre','KITTI2012','KITTI2015','KITTIraw','middlebury2021','middlebury2014','middlebury2005','middlebury2006','ETH3D','MiddEval3F','MiddEval3H','MiddEval3Q','MiddEval3F_test','MiddEval3H_test','MiddEval3Q_test','SceneFlow_monka','SceneFlow_flying','SceneFlow_test','SceneFlow_driving_cl','booster','vkitti']  
    # all middeval3Q is in 192
    dataset_192 = ['SceneFlow_monka_192','SceneFlow_flying_192','SceneFlow_test_192','Cre_192','middlebury2021_192','middlebury2006_192','vkitti_192','MiddEval3H_192','KITTI2012_192','KITTI2015_192','KITTI2015_test','KITTI2012_test'] 
    
    dataset_all = dataset_ori+dataset_192
    assert dataset in dataset_all,dataset 

    calib_list = None
    if 'Cre' in dataset: # 59996 avoid save&load disp except for GT
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_Cre(dataset,save_method)
    elif 'SceneFlow' in dataset: # 4400+20304 avoid save&load disp except for GT
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_SceneFlow(dataset,method,save_method)
    elif 'vkitti' in dataset: # 21260
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_vkitti(dataset,save_method)
    elif dataset == 'KITTIraw': # avoid lsave&load disp except for GT
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_KITTIraw(method,save_method)
    elif dataset == 'KITTI2015' or dataset == 'KITTI2015_192': # 200
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_KITTI2015(dataset,if_train,method,save_method)
    elif dataset == 'KITTI2012' or dataset == 'KITTI2012_192': # 200
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_KITTI2012(dataset,if_train,method,save_method)
    elif dataset == 'KITTI2015_test': # 200
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_KITTI2015_test(dataset,if_train,method,save_method)
    elif dataset == 'KITTI2012_test': # 200
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_KITTI2012_test(dataset,if_train,method,save_method)
    elif dataset == 'booster': # 228
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_booster(if_train,method,save_method)
    elif dataset == 'ETH3D': # 27 max disp = 146 in test_set
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_ETH3D(if_train,method,save_method)
    elif 'MiddEval3' in dataset: # 15 max disp = 770 for full reso in test_set # 644,322,161 in F,H,Q train
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image,calib_list = load_MiddEval3(dataset,if_train,method,save_method) # 15
    elif 'middlebury2021' in dataset: # 355 max disp = 356 in train
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image,calib_list = load_middlebury2021(dataset,method,save_method) # 355
    elif dataset == 'middlebury2014': # 138 max disp = 1074 in train
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image,calib_list = load_middlebury2014(if_train,method,save_method) # 138
    elif 'middlebury2006' in dataset: # 189 max disp = 230 in train
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_middlebury2006(dataset,method,save_method) # 189
    elif dataset == 'middlebury2005': # 54 max disp = 232 in train
        left_list,right_list,disp_list,save_path_disp,save_path_disp_image = load_middlebury2005(method,save_method) # 54
    else:
        raise ValueError("dataset do not exist: {}".format(dataset))

    if not calib_list is None:
        assert len(calib_list) == len(left_list), dataset
        calib_list.sort()
    else:
        calib_list = [None]*len(left_list)
    list_sort(left_list,right_list,disp_list,save_path_disp,save_path_disp_image,calib_list)

    # scale the dataset
    if not dataset_scale is None:
        if dataset_scale < 1: # down-scale
            dataset_scale_ = int(1/dataset_scale)
            disp_list = disp_list[0::dataset_scale_]
            right_list = right_list[0::dataset_scale_]
            left_list = left_list[0::dataset_scale_]
            save_path_disp = save_path_disp[0::dataset_scale_]
            save_path_disp_image = save_path_disp_image[0::dataset_scale_]
            calib_list = calib_list[0::dataset_scale_]
        elif dataset_scale > 1: # up-scale
            dataset_scale_ = int(dataset_scale)
            disp_list = disp_list*dataset_scale_
            right_list = right_list*dataset_scale_
            left_list = left_list*dataset_scale_
            save_path_disp = save_path_disp*dataset_scale_
            save_path_disp_image = save_path_disp_image*dataset_scale_
            calib_list = calib_list*dataset_scale_
    
    # check file numbers
    # if if_train:
    assert len(left_list) == len(right_list) == len(disp_list) == len(save_path_disp) == len(save_path_disp_image),dataset+': '+str(len(left_list))+' '+str(len(right_list))+' '+str(len(disp_list))+' '+str(len(save_path_disp))+' '+str(len(save_path_disp_image))+' '
    # else:
    #     assert len(left_list) == len(right_list) == len(save_path_disp) == len(save_path_disp_image),dataset+': '+str(len(left_list))+' '+str(len(right_list))+' '+str(len(save_path_disp))+' '+str(len(save_path_disp_image))+' '
    print('dataset {} contains {}*{}={} samples'.format(dataset,int(len(left_list)/dataset_scale),dataset_scale,len(left_list)))
    return {'left_list':left_list,'right_list':right_list,'disp_list':disp_list,'save_path_disp':save_path_disp,'save_path_disp_image':save_path_disp_image,'calib_list':calib_list},len(left_list)

def load_vkitti(dataset,save_method):
    
    root_dir='../datasets/vkitti2'
    if "_192" in dataset:
        with open('../datasets/txts/{}_left_filt.txt'.format(dataset), "r", encoding="utf-8") as file:
            left_list = file.readlines()
        with open('../datasets/txts/{}_disp_filt.txt'.format(dataset), "r", encoding="utf-8") as file:
            disp_list = file.readlines()
        left_list = [os.path.join(root_dir,u[:-1]) for u in left_list]
        right_list = [i.replace('Camera_0','Camera_1') for i in left_list]
        disp_list = [os.path.join(root_dir,u[:-1]) for u in disp_list]
    else:
        left_list = sorted(glob(root_dir + '/Scene*/*/frames/rgb/Camera_0/rgb*.jpg'))
        right_list = [left.replace('/Camera_0/', '/Camera_1/') for left in left_list]
        disp_list = [left.replace('/rgb/', '/depth/').replace('rgb_', 'depth_')[:-3] + 'png' for left in left_list]
    
    # save_path_disp = ['a/b/c/delete.png']*len(disp_list)
    # save_path_disp_image = ['a/b/c/delete_vis.png']*len(disp_list)
    save_path_disp = []
    save_path_disp_image = []
    for i in range(len(left_list)):
        split_path = left_list[i].split('/')
        name = split_path[-1].split('.')[0] 
        save_dir = '/'.join(split_path[:-3])
        save_dir1 = os.path.join(save_dir,'saved/{}/disp'.format(save_method))
        save_dir2 = os.path.join(save_dir,'saved/{}/vis'.format(save_method))
        save_path1 = os.path.join(save_dir1,'{}.npy'.format(name))
        save_path2 = os.path.join(save_dir2,'{}.png'.format(name))
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)
        _ = os.path.join(save_dir,'saved')
        if not os.path.exists(_):
            os.makedirs(_)    
    
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image 

def load_MiddEval3(dataset,if_train,method,save_method):
    if dataset in ['MiddEval3H_192']:
        assert if_train
        root_dir='../datasets/middlebury'
        with open('../datasets/txts/{}_left_filt.txt'.format(dataset), "r", encoding="utf-8") as file:
            left_list = file.readlines()
        with open('../datasets/txts/{}_disp_filt.txt'.format(dataset), "r", encoding="utf-8") as file:
            disp_list = file.readlines()
        left_list = [os.path.join(root_dir,u[:-1]) for u in left_list]
        right_list = [i.replace('im0','im1') for i in left_list]
        disp_list = [os.path.join(root_dir,u[:-1]) for u in disp_list]
        calib_list = [i.replace('im0.png','calib.txt') for i in left_list]
    else:
        if 'F' in dataset:
            if if_train and not 'test' in dataset:
                dataset_path = '../datasets/middlebury/MiddEval3/trainingF'
            else:
                dataset_path = '../datasets/middlebury/MiddEval3/testF'
        elif 'H' in dataset:
            if if_train and not 'test' in dataset:
                dataset_path = '../datasets/middlebury/MiddEval3/trainingH'
            else:
                dataset_path = '../datasets/middlebury/MiddEval3/testH'
        elif 'Q' in dataset:
            
            if if_train and not 'test' in dataset:
                dataset_path = '../datasets/middlebury/MiddEval3/trainingQ'
            else:
                dataset_path = '../datasets/middlebury/MiddEval3/testQ' 
        left_list = []
        right_list = []
        disp_list = []
        calib_list = []
        paths = os.walk(dataset_path)
        for path, dir_lst, file_lst in paths:
            if 'im0' in str(file_lst):
                left_list.append(os.path.join(path,'im0.png'))
                right_list.append(os.path.join(path,'im1.png'))
                calib_list.append(os.path.join(path,'calib.txt'))
                if method == 'gt':
                    disp_list.append(os.path.join(path,'disp0GT.pfm'))
                else:
                    disp_list.append(os.path.join(path,'saved/{}/disp0.npy'.format(method)))
        
    save_path_disp = []
    save_path_disp_image = []
    for i in range(len(left_list)):
        save_dir_ = '/'.join(left_list[i].split('/')[:-1])
        save_dir = os.path.join(save_dir_,'saved/{}'.format(save_method))
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
        save_path1 = os.path.join(save_dir,'disp0.npy')
        save_path2 = os.path.join(save_dir,'disp0.png')
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)    
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image,calib_list

def load_ETH3D(if_train,method,save_method):
    if if_train:
        dataset_path = '../datasets/ETH3D/training'
    else:
        dataset_path = '../datasets/ETH3D/testing'
    left_list = []
    right_list = []
    disp_list = []
    paths = os.walk(dataset_path)
    
    for path, dir_lst, file_lst in paths:
        if 'im0' in str(file_lst):
            left_list.append(os.path.join(path,'im0.png'))
            right_list.append(os.path.join(path,'im1.png'))
            if method == 'gt': # and 'disp0GT' in str(file_lst):
                disp_list.append(os.path.join(path,'disp0GT.pfm'))
            else:
                disp_list.append(os.path.join(path,'saved/{}/disp0.npy'.format(method)))

    save_path_disp = []
    save_path_disp_image = []
    for i in range(len(left_list)):
        save_dir_ = '/'.join(left_list[i].split('/')[:-1])
        save_dir = os.path.join(save_dir_,'saved/{}'.format(save_method))
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
        save_path1 = os.path.join(save_dir,'disp0.npy')
        save_path2 = os.path.join(save_dir,'disp0.png')
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image

def load_middlebury2021(dataset,method,save_method):
    
    if "_192" in dataset:
        root_dir='../datasets/middlebury'
        with open('../datasets/txts/{}_left_filt.txt'.format(dataset), "r", encoding="utf-8") as file:
            left_list = file.readlines()
        with open('../datasets/txts/{}_disp_filt.txt'.format(dataset), "r", encoding="utf-8") as file:
            disp_list = file.readlines()
        left_list = [os.path.join(root_dir,u[:-1]) for u in left_list]
        right_list = [i.replace('im0','im1') for i in left_list]
        disp_list = [os.path.join(root_dir,u[:-1]) for u in disp_list]
        calib_list = None
    else:
        dataset_path = '../datasets/middlebury/2021'
        left_list = []
        right_list = []
        disp_list = []
        calib_list = []
        seqs = sorted(os.listdir(dataset_path))
        
        for s in seqs:
            seq_path = os.path.join(dataset_path,s)
            if method == 'gt':
                disp_dir = os.path.join(seq_path,'disp0.pfm')
            else:
                disp_dir = os.path.join(seq_path,'saved/{}/disp0.npy'.format(method))
            calib_dir = os.path.join(seq_path,'calib.txt')
            paths = os.walk(os.path.join(dataset_path,s,'ambient'))
            for path, dir_lst, file_lst in paths:
                for left_file in file_lst:
                    if left_file.startswith('im0'):
                        left_list.append(os.path.join(path,left_file))
                        right_list.append(os.path.join(path,left_file.replace('im0','im1')))
                        calib_list.append(calib_dir)
                        disp_list.append(disp_dir)
    
    save_path_disp = []
    save_path_disp_image = []
    for i in range(len(left_list)):
        save_dir_ = '/'.join(left_list[i].split('/')[:-3])
        save_dir = os.path.join(save_dir_,'saved/{}'.format(save_method))
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
        save_path1 = os.path.join(save_dir,'disp0.npy')
        save_path2 = os.path.join(save_dir,'disp0.png')
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image,calib_list
    
def load_middlebury2014(if_train,method,save_method,remove_dupli=False):
    if if_train:
        dataset_path = '../datasets/middlebury/2014/training'
    else:
        dataset_path = '../datasets/middlebury/2014/testing'
    left_list = []
    right_list = []
    disp_list = []
    calib_list = []
    dupli_list = ['Adir','Jade','Motor','Piano','Pipe','Play','Recy','Vinta']
    
    seqs = sorted(os.listdir(dataset_path))
    for s in seqs:
        if remove_dupli:
            dupli_check = [du in s for du in dupli_list]
            if any(dupli_check):
                continue 
        seq_path = os.path.join(dataset_path,s)
        if if_train:
            left_list += [os.path.join(seq_path,'im0.png')]*3
            right_list += [os.path.join(seq_path,'im1.png')]
            right_list += [os.path.join(seq_path,'im1E.png')]
            right_list += [os.path.join(seq_path,'im1L.png')]
            calib_list += [os.path.join(seq_path,'calib.txt')]*3
            if method == 'gt':
                disp_dir = os.path.join(seq_path,'disp0.pfm')
            else:
                disp_dir = os.path.join(seq_path,'saved/{}/disp0.npy'.format(method))
            disp_list += [disp_dir]*3
        else:
            left_list += [os.path.join(seq_path,'im0.png')]
            right_list += [os.path.join(seq_path,'im1.png')]
            calib_list += [os.path.join(seq_path,'calib.txt')]
            if method == 'gt':
                disp_dir = os.path.join(seq_path,'disp0.pfm')
            else:
                disp_dir = os.path.join(seq_path,'saved/{}/disp0.npy'.format(method))
            disp_list += [disp_dir]
            
     
    save_path_disp = []
    save_path_disp_image = []
    for i in range(len(left_list)):
        save_dir_ = '/'.join(left_list[i].split('/')[:-1])
        save_dir = os.path.join(save_dir_,'saved/{}'.format(save_method))
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
        save_path1 = os.path.join(save_dir,'disp0.npy')
        save_path2 = os.path.join(save_dir,'disp0.png')
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image,calib_list

def load_middlebury2006(dataset,method,save_method):
    if "_192" in dataset:
        root_dir='../datasets/middlebury'
        with open('../datasets/txts/{}_left_filt.txt'.format(dataset), "r", encoding="utf-8") as file:
            left_list = file.readlines()
        with open('../datasets/txts/{}_disp_filt.txt'.format(dataset), "r", encoding="utf-8") as file:
            disp_list = file.readlines()
        left_list = [os.path.join(root_dir,u[:-1]) for u in left_list]
        right_list = [i.replace('view1','view5') for i in left_list]
        disp_list = [os.path.join(root_dir,u[:-1]) for u in disp_list]
    else:
        dataset_path = '../datasets/middlebury/2006'
        left_list = []
        right_list = []
        disp_list = []
        seqs = sorted(os.listdir(dataset_path))
        
        for s in seqs:
            seq_path = os.path.join(dataset_path,s)
            if method == 'gt':
                disp_dir = os.path.join(seq_path,'disp1.png')
            else:
                disp_dir = os.path.join(seq_path,'saved/{}/disp1.npy'.format(method))
            paths = os.walk(seq_path)
            for path, dir_lst, file_lst in paths:
                for left_file in file_lst:
                    if left_file.startswith('view1'):
                        left_list.append(os.path.join(path,left_file))
                        right_list.append(os.path.join(path,left_file.replace('view1','view5')))
                        disp_list.append(disp_dir)
    
    save_path_disp = []
    save_path_disp_image = []
    for i in range(len(left_list)):
        save_dir_ = '/'.join(left_list[i].split('/')[:-3])
        save_dir = os.path.join(save_dir_,'saved/{}'.format(save_method))
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
        save_path1 = os.path.join(save_dir,'disp0.npy')
        save_path2 = os.path.join(save_dir,'disp0.png')
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image

def load_middlebury2005(method,save_method):
    dataset_path = '../datasets/middlebury/2005'
    left_list = []
    right_list = []
    disp_list = []
    seqs = sorted(os.listdir(dataset_path))
    for s in seqs:
        seq_path = os.path.join(dataset_path,s)
        if method == 'gt':
            disp_dir = os.path.join(seq_path,'disp1.png')
        else:
            disp_dir = os.path.join(seq_path,'saved/{}/disp1.npy'.format(method))
        paths = os.walk(seq_path)
        for path, dir_lst, file_lst in paths:
            for left_file in file_lst:
                if left_file.startswith('view1'):
                    left_list.append(os.path.join(path,left_file))
                    right_list.append(os.path.join(path,left_file.replace('view1','view5')))
                    disp_list.append(disp_dir)
    
    save_path_disp = []
    save_path_disp_image = []
    for i in range(len(left_list)):
        save_dir_ = '/'.join(left_list[i].split('/')[:-3])
        save_dir = os.path.join(save_dir_,'saved/{}'.format(save_method))
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
        save_path1 = os.path.join(save_dir,'disp0.npy')
        save_path2 = os.path.join(save_dir,'disp0.png')
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image

def load_Cre(dataset,save_method):
    
    if os.path.exists('../../../share/Cre'):
        root_dir = '../../../share/Cre'
    else:
        root_dir = '../datasets/Cre'
        
    if "_192" in dataset:
        with open('../datasets/txts/{}_left_filt.txt'.format(dataset), "r", encoding="utf-8") as file:
            left_list = file.readlines()
        with open('../datasets/txts/{}_disp_filt.txt'.format(dataset), "r", encoding="utf-8") as file:
            disp_list = file.readlines()
        left_list = [os.path.join(root_dir,u[:-1]) for u in left_list]
        right_list = [i.replace('_left','_right') for i in left_list]
        disp_list = [os.path.join(root_dir,u[:-1]) for u in disp_list]
    else:
        dataset_paths = ['hole','reflective','shapenet','tree']
        dataset_paths = [os.path.join(root_dir,u) for u in dataset_paths]
        left_list = []
        right_list = []
        disp_list = []
        for dataset_path in dataset_paths:
            seqs = sorted(os.listdir(dataset_path))
            for s in seqs:
                all_files = dirs_walk([os.path.join(dataset_path,s)])
                left_list += list(filter(lambda x: 'left.jpg' in x, all_files))
                right_list += list(filter(lambda x: 'right.jpg' in x, all_files))  
                disp_list += list(filter(lambda x: 'left.disp' in x, all_files))  
    
    save_path_disp = []
    save_path_disp_image = []
    for i in range(len(left_list)):
        split_path = left_list[i].split('/')
        name = split_path[-1].split('.')[0]
        save_dir = '/'.join(split_path[:-1])
        save_dir1 = os.path.join(save_dir,'saved/{}/disp'.format(save_method))
        save_dir2 = os.path.join(save_dir,'saved/{}/vis'.format(save_method))
        save_path1 = os.path.join(save_dir1,'{}.npy'.format(name))
        save_path2 = os.path.join(save_dir2,'{}.png'.format(name))
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)
        _ = os.path.join(save_dir,'saved')
        if not os.path.exists(_):
            os.makedirs(_)
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image

def load_SceneFlow(dataset,method,save_method): 
    
    if os.path.exists('../../../share/sceneflow'):
        root_dir = '../../../share/sceneflow'
    else:
        root_dir = '../datasets/sceneflow'
    
    if "_192" in dataset:
        assert method == 'gt'
        with open('../datasets/txts/{}_left_filt.txt'.format(dataset), "r", encoding="utf-8") as file:
            left_list = file.readlines()
        with open('../datasets/txts/{}_disp_filt.txt'.format(dataset), "r", encoding="utf-8") as file:
            disp_list = file.readlines()
        left_list = [os.path.join(root_dir,u[:-1]) for u in left_list]
        right_list = [i.replace('/left/','/right/') for i in left_list]
        disp_list = [os.path.join(root_dir,u[:-1]) for u in disp_list]
    else:
        if 'SceneFlow_test' in dataset:
            dataset_paths = []
            for u in ['frames_finalpass/TEST/A','frames_finalpass/TEST/B','frames_finalpass/TEST/C']:
                k = os.path.join(root_dir,u)
                for item in os.scandir(k):
                    if item.is_dir():
                        dataset_paths.append(item.path)
        elif 'SceneFlow_driving' in dataset:
            dataset_paths = ['frames_cleanpass/15mm_focallength/scene_backwards/fast','frames_cleanpass/15mm_focallength/scene_backwards/slow','frames_cleanpass/15mm_focallength/scene_forwards/fast','frames_cleanpass/15mm_focallength/scene_forwards/slow','frames_cleanpass/35mm_focallength/scene_backwards/fast','frames_cleanpass/35mm_focallength/scene_backwards/slow','frames_cleanpass/35mm_focallength/scene_forwards/fast','frames_cleanpass/35mm_focallength/scene_forwards/slow']
            dataset_paths = [os.path.join(root_dir,u) for u in dataset_paths]
        elif 'SceneFlow_flying' in dataset:
            dataset_paths = []
            for u in ['frames_finalpass/TRAIN/A','frames_finalpass/TRAIN/B','frames_finalpass/TRAIN/C']:
                k = os.path.join(root_dir,u)
                for item in os.scandir(k):
                    if item.is_dir():
                        dataset_paths.append(item.path)
        elif 'SceneFlow_monka' in dataset:
            dataset_paths = []
            for u in ['frames_finalpass/monka']:
                k = os.path.join(root_dir,u)
                for item in os.scandir(k):
                    if item.is_dir():
                        dataset_paths.append(item.path)

        left_list = []
        right_list = []
        disp_list = []
        for dataset_path in dataset_paths:
            left_dir = os.path.join(dataset_path,'left')
            right_dir = os.path.join(dataset_path,'right') # right, right_PT
            disp_dir = left_dir.replace('frames_cleanpass','disparity').replace('frames_finalpass','disparity')
            if not method == 'gt':
                disp_dir = disp_dir.replace(method,'saved/{}/disp')
            left_list+=dirs_walk([left_dir]) 
            right_list+=dirs_walk([right_dir]) 
            disp_list+=dirs_walk([disp_dir])
                    
    save_path_disp = []
    save_path_disp_image = []
    # if dataset == 'SceneFlow_test':
    for i in range(len(disp_list)):
        split_path = disp_list[i].split('/')
        name = split_path[-1].split('.')[0]
        save_dir = '/'.join(split_path[:-2])
        save_dir1 = os.path.join(save_dir,'saved/{}/disp'.format(save_method))
        save_dir2 = os.path.join(save_dir,'saved/{}/vis'.format(save_method))
        save_path1 = os.path.join(save_dir1,'{}.npy'.format(name))
        save_path2 = os.path.join(save_dir2,'{}.png'.format(name))
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)
        if 'SceneFlow_test' in dataset:
            if not os.path.exists(save_dir1):
                os.makedirs(save_dir1)
            if not os.path.exists(save_dir2):
                os.makedirs(save_dir2)  
        else:
            _ = os.path.join(save_dir,'saved')
            if not os.path.exists(_):
                os.makedirs(_)
    # else: # do not make dir for save the results
    #     save_path_disp = ['a/b/c/delete.png']*len(disp_list)
    #     save_path_disp_image = ['a/b/c/delete_vis.png']*len(disp_list)
    
    
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image

def load_KITTIraw(method,save_method):
    dirs_list = []
    left_list = []
    right_list = []
    disp_list = []
    if os.path.exists('../../../share/KITTI/raw'):
        dataset_path = '../../../share/KITTI/raw'
    else:
        dataset_path = '../datasets/KITTI/raw'
    paths = os.walk(dataset_path)
    for path, dir_lst, file_lst in paths:
        if '_sync' in path and path[-1] == 'c' and not path in dirs_list and not '2011_10_03' in path:
            # if '09_29' in path and '0071' in path:
            # if '09_29_drive_0004' in path :
                # dirs_list.append(path)
            dirs_list.append(path)
    dirs_list.sort()
    for dir in dirs_list:
        left_dir = os.path.join(dir,'image_02/data')
        right_dir = os.path.join(dir,'image_03/data')
        if method == 'gt':
            disp_dir = os.path.join(dir,'RAFT_Stereo/disp')
        else:
            disp_dir = os.path.join(dir,'saved/{}/disp'.format(method))
        sub_left_list = dirs_walk([left_dir])
        sub_right_list = dirs_walk([right_dir])
        assert len(sub_left_list) == len(sub_right_list)
        sub_disp_list = dirs_walk([disp_dir])
        left_list+=sub_left_list
        right_list+=sub_right_list
        if len(sub_disp_list) == 0:
            disp_list+=sub_left_list
        else:
            disp_list+=sub_disp_list
    # for i in range(len(left_list)):
    #     split_path = left_list[i].split('/')
    #     name = split_path[-1].split('.')[0]
    #     save_dir = '/'.join(split_path[:-3])
    #     # _ = os.path.join(save_dir,'saved')
    #     # if not os.path.exists(_):
    #     #     os.makedirs(_)
    #     save_dir1 = os.path.join(save_dir,'saved/{}/disp'.format(save_method))
    #     save_dir2 = os.path.join(save_dir,'saved/{}/vis'.format(save_method))
    #     save_path1 = os.path.join(save_dir1,'{}.npy'.format(name))
    #     save_path2 = os.path.join(save_dir2,'{}.png'.format(name))
    #     save_path_disp.append(save_path1)
    #     save_path_disp_image.append(save_path2)
    #     # if not os.path.exists(save_dir1):
    #     #     os.makedirs(save_dir1)
    #     # if not os.path.exists(save_dir2):
    #     #     os.makedirs(save_dir2)
    
    save_path_disp = []
    save_path_disp_image = []
    for i in range(len(left_list)):
        split_path = left_list[i].split('/')
        name = split_path[-1].split('.')[0]
        save_dir = '/'.join(split_path[:-3])
        save_dir1 = os.path.join(save_dir,'saved/{}/disp'.format(save_method))
        save_dir2 = os.path.join(save_dir,'saved/{}/vis'.format(save_method))
        save_path1 = os.path.join(save_dir1,'{}.npy'.format(name))
        save_path2 = os.path.join(save_dir2,'{}.png'.format(name))
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)
        _ = os.path.join(save_dir,'saved')
        if not os.path.exists(_):
            os.makedirs(_)    
    # save_path_disp = ['a/b/c/delete.png']*len(disp_list)
    # save_path_disp_image = ['a/b/c/delete_vis.png']*len(disp_list)
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image

def load_KITTI2015_test(dataset,if_train,method,save_method):
    dataset_path = '../datasets/KITTI/2015/testing'
        
    left_dir = os.path.join(dataset_path,'image_2')
    right_dir = os.path.join(dataset_path,'image_3')
    # if method == 'gt':
    #     disp_dir = os.path.join(dataset_path,'IGEV_gt/disp') 
    # else:
    #     disp_dir = os.path.join(dataset_path,'saved/{}/disp'.format(method))
            
    left_list = dirs_walk([left_dir])
    right_list = dirs_walk([right_dir])
    disp_list = dirs_walk([left_dir])
    disp_list = [i.replace('.png','none.png') for i in disp_list]
    
    for file_name in left_list.copy():
        if '_11' in file_name:
            left_list.remove(file_name)
    for file_name in right_list.copy():
        if '_11' in file_name:
            right_list.remove(file_name)
    
    disp_list = [i for i in left_list]
    disp_list = [i.replace('.png','none.png') for i in disp_list]

    save_path_disp = []
    save_path_disp_image = []
    for i in range(len(left_list)):
        split_path = left_list[i].split('/')
        name = split_path[-1].split('.')[0]
        save_dir = '/'.join(split_path[:-2])
        save_dir1 = os.path.join(save_dir,'saved/{}/disp'.format(save_method))
        save_dir2 = os.path.join(save_dir,'saved/{}/vis'.format(save_method))
        save_path1 = os.path.join(save_dir1,'{}.npy'.format(name))
        save_path2 = os.path.join(save_dir2,'{}.png'.format(name))
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)
    if not os.path.exists(save_dir1):
        os.makedirs(save_dir1)
    if not os.path.exists(save_dir2):
        os.makedirs(save_dir2)
        
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image

def load_KITTI2015(dataset,if_train,method,save_method):
    if if_train:
        dataset_path = '../datasets/KITTI/2015/training'
    else:
        dataset_path = '../datasets/KITTI/2015/testing'
        
    if "_192" in dataset:
        assert if_train
        root_dir = '../datasets/KITTI/'
        with open('../datasets/txts/{}_left_filt.txt'.format(dataset), "r", encoding="utf-8") as file:
            left_list = file.readlines()
        with open('../datasets/txts/{}_disp_filt.txt'.format(dataset), "r", encoding="utf-8") as file:
            disp_list = file.readlines()
        left_list = [os.path.join(root_dir,u[:-1]) for u in left_list]
        right_list = [i.replace('image_2','image_3') for i in left_list]
        disp_list = [os.path.join(root_dir,u[:-1]) for u in disp_list]    
    else:
        left_dir = os.path.join(dataset_path,'image_2')
        right_dir = os.path.join(dataset_path,'image_3')
        if method == 'gt':
            if if_train:
                disp_dir = os.path.join(dataset_path,'disp_occ_0')
            else:
                disp_dir = os.path.join(dataset_path,'IGEV_gt/disp') 
        else:
            disp_dir = os.path.join(dataset_path,'saved/{}/disp'.format(method))
                
        left_list = dirs_walk([left_dir])
        right_list = dirs_walk([right_dir])
        disp_list = dirs_walk([disp_dir])
        
        for file_name in left_list.copy():
            if '_11' in file_name:
                left_list.remove(file_name)
        for file_name in right_list.copy():
            if '_11' in file_name:
                right_list.remove(file_name)

    save_path_disp = []
    save_path_disp_image = []
    for i in range(len(left_list)):
        split_path = left_list[i].split('/')
        name = split_path[-1].split('.')[0]
        save_dir = '/'.join(split_path[:-2])
        save_dir1 = os.path.join(save_dir,'saved/{}/disp'.format(save_method))
        save_dir2 = os.path.join(save_dir,'saved/{}/vis'.format(save_method))
        save_path1 = os.path.join(save_dir1,'{}.npy'.format(name))
        save_path2 = os.path.join(save_dir2,'{}.png'.format(name))
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)
    if not os.path.exists(save_dir1):
        os.makedirs(save_dir1)
    if not os.path.exists(save_dir2):
        os.makedirs(save_dir2)
        
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image


def load_KITTI2012_test(dataset,if_train,method,save_method):
    dataset_path = '../datasets/KITTI/2012/testing'
        
    left_dir = os.path.join(dataset_path,'colored_0')
    right_dir = os.path.join(dataset_path,'colored_1')
    # if method == 'gt':
    #     disp_dir = os.path.join(dataset_path,'IGEV_gt/disp')
    # else:
    #     disp_dir = os.path.join(dataset_path,'saved/{}/disp'.format(method))
    
    left_list = dirs_walk([left_dir])
    right_list = dirs_walk([right_dir])
    
    for file_name in left_list.copy():
        if '_11' in file_name:
            left_list.remove(file_name)
    for file_name in right_list.copy():
        if '_11' in file_name:
            right_list.remove(file_name)

    disp_list = [i for i in left_list]
    disp_list = [i.replace('.png','none.png') for i in disp_list]
    
    save_path_disp = []
    save_path_disp_image = []
    for i in range(len(left_list)):
        split_path = left_list[i].split('/')
        name = split_path[-1].split('.')[0]
        save_dir = '/'.join(split_path[:-2])
        save_dir1 = os.path.join(save_dir,'saved/{}/disp'.format(save_method))
        save_dir2 = os.path.join(save_dir,'saved/{}/vis'.format(save_method))
        save_path1 = os.path.join(save_dir1,'{}.npy'.format(name))
        save_path2 = os.path.join(save_dir2,'{}.png'.format(name))
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)
    if not os.path.exists(save_dir1):
        os.makedirs(save_dir1)
    if not os.path.exists(save_dir2):
        os.makedirs(save_dir2)
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image

def load_KITTI2012(dataset,if_train,method,save_method):
    if if_train:
        dataset_path = '../datasets/KITTI/2012/training'
    else:
        dataset_path = '../datasets/KITTI/2012/testing'
        
    if "_192" in dataset:
        assert if_train
        root_dir = '../datasets/KITTI/'
        with open('../datasets/txts/{}_left_filt.txt'.format(dataset), "r", encoding="utf-8") as file:
            left_list = file.readlines()
        with open('../datasets/txts/{}_disp_filt.txt'.format(dataset), "r", encoding="utf-8") as file:
            disp_list = file.readlines()
        left_list = [os.path.join(root_dir,u[:-1]) for u in left_list]
        right_list = [i.replace('colored_0','colored_1') for i in left_list]
        disp_list = [os.path.join(root_dir,u[:-1]) for u in disp_list]  
    else:
        left_dir = os.path.join(dataset_path,'colored_0')
        right_dir = os.path.join(dataset_path,'colored_1')
        if method == 'gt':
            if if_train:
                disp_dir = os.path.join(dataset_path,'disp_occ')
            else:
                disp_dir = os.path.join(dataset_path,'IGEV_gt/disp')
        else:
            disp_dir = os.path.join(dataset_path,'saved/{}/disp'.format(method))
        
        left_list = dirs_walk([left_dir])
        right_list = dirs_walk([right_dir])
        disp_list = dirs_walk([disp_dir]) 
        for file_name in left_list.copy():
            if '_11' in file_name:
                left_list.remove(file_name)
        for file_name in right_list.copy():
            if '_11' in file_name:
                right_list.remove(file_name)

    save_path_disp = []
    save_path_disp_image = []
    for i in range(len(left_list)):
        split_path = left_list[i].split('/')
        name = split_path[-1].split('.')[0]
        save_dir = '/'.join(split_path[:-2])
        save_dir1 = os.path.join(save_dir,'saved/{}/disp'.format(save_method))
        save_dir2 = os.path.join(save_dir,'saved/{}/vis'.format(save_method))
        save_path1 = os.path.join(save_dir1,'{}.npy'.format(name))
        save_path2 = os.path.join(save_dir2,'{}.png'.format(name))
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)
    if not os.path.exists(save_dir1):
        os.makedirs(save_dir1)
    if not os.path.exists(save_dir2):
        os.makedirs(save_dir2)
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image

def load_booster(if_train,method,save_method):
    if os.path.exists('../../../share/booster'):
        if if_train:
            dataset_path = '../../../share/booster/train/balanced'
        else:
            dataset_path = '../../../share/booster/test/balanced'
    else:
        if if_train:
            dataset_path = '../datasets/booster/train/balanced'
        else:
            dataset_path = '../datasets/booster/test/balanced'
    left_list = []
    right_list = []
    disp_list = []
    seqs = sorted(os.listdir(dataset_path))
        
    for s in seqs:
        seq_path = os.path.join(dataset_path,s)
        if method == 'gt':
            disp_dir = os.path.join(seq_path,'disp_00.npy')
        else:
            disp_dir = os.path.join(seq_path,'saved/{}/disp_00.npy'.format(method))
        for item in os.scandir(os.path.join(seq_path,'camera_00')):
            left_list.append(item.path)
            right_list.append(item.path.replace('camera_00','camera_02'))
            disp_list.append(disp_dir)
    
    save_path_disp = []
    save_path_disp_image = []
    # if not if_train:
    for i in range(len(left_list)):
        save_dir_ = '/'.join(left_list[i].split('/')[:-2])
        save_dir = os.path.join(save_dir_,'saved/{}'.format(save_method))
        save_path1 = os.path.join(save_dir,'disp0.npy')
        save_path2 = os.path.join(save_dir,'disp0.png')
        save_path_disp.append(save_path1)
        save_path_disp_image.append(save_path2)
        _ = os.path.join(save_dir_,'saved')
        if not os.path.exists(_):
            os.makedirs(_)
    # # else: 
    # save_path_disp = ['a/b/c/delete.png']*len(disp_list)
    # save_path_disp_image = ['a/b/c/delete_vis.png']*len(disp_list)
    return left_list,right_list,disp_list,save_path_disp,save_path_disp_image

def list_sort(left_list,right_list,disp_list,save_path_disp,save_path_disp_image,calib_list):
    left_list.sort()
    right_list.sort()
    disp_list.sort()
    save_path_disp.sort()
    save_path_disp_image.sort()
    if not None in calib_list:
        calib_list.sort()